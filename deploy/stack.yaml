AWSTemplateFormatVersion: 2010-09-09
Description: Stack for TheBestest App
Resources:
###############################################################################
## Roles
###############################################################################
  lambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BestestDbAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:GetRecords
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${itemTable}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

###############################################################################
## API Infra and User Pool
###############################################################################
  apiGw:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: thebestest-api

  apiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref apiGw

  apiStageV1:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: v1
      RestApiId: !Ref apiGw
      DeploymentId: !Ref apiDeployment

  userPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: thebestest-userpool
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false

  adminClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: thebestest-adminclient
      UserPoolId: !Ref userPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH

###############################################################################
## DynamoDB Tables
###############################################################################
  itemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: thebestest_items
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: category_name
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: category_name
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

###############################################################################
## API Resources and Functions
###############################################################################

# /items
  itemsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt apiGw.RootResourceId
      PathPart: items
      RestApiId: !Ref apiGw

# GET /items
  getItemsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref apiGw
      ResourceId: !Ref itemsResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.user_id: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getItemsFunction.Arn}/invocations"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: "{ \n    \"user_id\" : \"$input.params('user_id')\"\n}"
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  getItemsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../functions/get_items_by_user
      Environment:
        Variables:
          itemsTableName: !Ref itemTable
      Handler: get_items_by_user.lambda_handler
      Role: !GetAtt lambdaRole.Arn
      Runtime: python3.6

  getItemsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGw}/*/GET/items"
      FunctionName: !Ref getItemsFunction
      Action: lambda:InvokeFunction


###############################################################################
## Outputs
###############################################################################

Outputs:
  userPoolId:
    Value: !Ref userPool
  adminClientId:
    Value: !Ref adminClient

