AWSTemplateFormatVersion: 2010-09-09
Description: A Pipeline to deploy TheBestest App to an environment
Parameters:
  S3SourceKey:
    Type: String
    Default: source/thebestest-master.zip
Resources:
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:PutObject
                Resource: !Sub
                  -  arn:aws:s3:::${PipelineBucket}/*
                  - { PipelineBucket: !ImportValue TheBestest-PipelineBucket }
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: !Sub
                  -  arn:aws:s3:::${PipelineBucket}
                  - { PipelineBucket: !ImportValue TheBestest-PipelineBucket }
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/thebestest-pipeline-test-*/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt CloudformationRole.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt TheBestestUnitTest.Arn
                  - !GetAtt TheBestestBuild.Arn

  CloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: cloudformationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub
                  -  arn:aws:s3:::${PipelineBucket}/*
                  - { PipelineBucket: !ImportValue TheBestest-PipelineBucket }
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:thebestest*
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: !Sub arn:aws:apigateway:${AWS::Region}::/*
              - Effect: Allow
                Action:
                  - dynamodb:*Table
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/thebestest*LambdaRole*
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                Resource: "*"
              - Effect: Allow
                Action:
                  - cognito-idp:CreateUserPool
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:DeleteUserPool
                  - cognito-idp:DeleteUserPoolClient
                  - cognito-idp:UpdateUserPool
                  - cognito-idp:UpdateUserPoolClient
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:CreateStateMachine
                  - states:DeleteStateMachine
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: buildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/thebestest*:log-stream:*
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:PutObject
                Resource: !Sub
                  -  arn:aws:s3:::${PipelineBucket}/*
                  - { PipelineBucket: !ImportValue TheBestest-PipelineBucket }
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: !Sub
                  -  arn:aws:s3:::${PipelineBucket}
                  - { PipelineBucket: !ImportValue TheBestest-PipelineBucket }
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/thebestest-pipeline-test-*/*

  TheBestestUnitTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-unittest
      ServiceRole: !GetAtt BuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec-unittest.yaml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/eb-python-3.4-amazonlinux-64:2.3.2
      Artifacts:
        Type: CODEPIPELINE

  TheBestestBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-build
      ServiceRole: !GetAtt BuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec-package.yaml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/eb-python-3.4-amazonlinux-64:2.3.2
      Artifacts:
        Type: CODEPIPELINE


  TheBestestPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref AWS::StackName
      ArtifactStore:
        Location: !ImportValue TheBestest-PipelineBucket
        Type: S3
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket: !ImportValue TheBestest-PipelineBucket
                S3ObjectKey: !Ref S3SourceKey
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: thebestest-source
        - Name: UnitTest
          Actions:
            - Name: UnitTest
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref TheBestestUnitTest
              InputArtifacts:
                - Name: thebestest-source
        - Name: Package
          Actions:
            - Name: Package
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref TheBestestBuild
              InputArtifacts:
                - Name: thebestest-source
              OutputArtifacts:
                - Name: !Sub ${AWS::StackName}-deploy-template
        - Name: DeployStack
          Actions:
            - Name: CreateChangeSet
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                StackName: !Sub ${AWS::StackName}
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${AWS::StackName}-changeset
                TemplatePath: !Sub ${AWS::StackName}-deploy-template::stack_deploy.yaml
                RoleArn: !GetAtt CloudformationRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "EnvName" : "${AWS::StackName}"
                  }
              InputArtifacts:
                - Name: !Sub ${AWS::StackName}-deploy-template
            - Name: ExecuteChangeSet
              RunOrder: 2
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                StackName: !Sub ${AWS::StackName}
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub ${AWS::StackName}-changeset