AWSTemplateFormatVersion: 2010-09-09
Description: Manages the flow through the pipeline for TheBestest App
Parameters:
  OAuthToken:
    Type: String
Resources:
  PipelineMgrLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub
                  -  arn:aws:s3:::${PipelineBucket}/*
                  - { PipelineBucket: !ImportValue TheBestest-PipelineBucket }
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - codepipeline:GetPipeline
                  - codepipeline:GetPipelineState
                  - codepipeline:StartPipelineExecution
                  - codepipeline:GetPipelineExecution
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WebhookHandler:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline
      Handler: manager.webhook_handler
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6

  RetrieveSource:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline
      Handler: manager.retrieve_source
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          OAUTH_TOKEN: !Ref OAuthToken
          S3_BUCKET: !ImportValue TheBestest-PipelineBucket

  StartTestPipeline:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline
      Handler: manager.start_pipeline
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          OAUTH_TOKEN: !Ref OAuthToken
          PIPELINE_NAME: !ImportValue TheBestest-TestPipeline

  CheckTestPipelineStatus:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline
      Handler: manager.check_pipeline_status
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          PIPELINE_NAME: !ImportValue TheBestest-TestPipeline

  SetTestStatus:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline
      Handler: manager.set_github_status
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          OAUTH_TOKEN: !Ref OAuthToken
          PIPELINE_NAME: !ImportValue TheBestest-TestPipeline

  StartStageDeployPipeline:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline
      Handler: manager.start_pipeline
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          OAUTH_TOKEN: !Ref OAuthToken
          PIPELINE_NAME: !ImportValue TheBestest-stage-DeployPipeline

  CheckStageDeployStatus:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline
      Handler: manager.check_pipeline_status
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          PIPELINE_NAME: !ImportValue TheBestest-stage-DeployPipeline

  SetStageDeployStatus:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline
      Handler: manager.set_github_status
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          OAUTH_TOKEN: !Ref OAuthToken
          PIPELINE_NAME: !ImportValue TheBestest-stage-DeployPipeline


  PipelineMgrStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelineMgrStateMachinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - lambda:InvokeFunction
                 # Todo Lockdown?
                Resource: "*"

  PipelineMgrStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
        	"Comment": "update Automatic testing or deployment of code kicked off by GH Webhooks",
        	"StartAt": "HandleWebhook",
        	"States": {
        		"HandleWebhook": {
        			"Type": "Task",
        			"Resource": "${WebhookHandler.Arn}",
        			"Next": "PipelineAction"
        		},
        		"PipelineAction": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.action",
        				"StringEquals": "test",
        				"Next": "RetrieveTestSource"
        			}],
        			"Default": "End"
        		},
        		"RetrieveTestSource": {
        			"Type": "Task",
        			"Resource": "${RetrieveSource.Arn}",
        			"Next": "StartUnitTest"
        		},
        		"StartUnitTest": {
        			"Type": "Task",
        			"Resource": "${StartTestPipeline.Arn}",
        			"Next": "CheckUnitTestStatus"
        		},
        		"CheckUnitTestStatus": {
        			"Type": "Task",
        			"Resource": "${CheckTestPipelineStatus.Arn}",
        			"Next": "UnitTestStatus"
        		},
        		"UnitTestStatus": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.pipeline_status",
        				"StringEquals": "InProgress",
        				"Next": "UnitTestStatusWait"
        			}],
        			"Default": "SetUnitTestStatus"
        		},
        		"UnitTestStatusWait": {
        			"Type": "Wait",
        			"Seconds": 15,
        			"Next": "CheckUnitTestStatus"
        		},
        		"SetUnitTestStatus": {
        			"Type": "Task",
        			"Resource": "${SetTestStatus.Arn}",
        			"Next": "CheckDeployToStage"
        		},
        		"CheckDeployToStage": {
        			"Type": "Choice",
        			"Choices": [{
        				"Or": [{
        						"Variable": "$.pipeline_status",
        						"StringEquals": "Failed"
        					},
        					{
        						"Variable": "$.pipeline_status",
        						"StringEquals": "Superseded"
        					}
        				],
        				"Next": "End"
        			}],
        			"Default": "StartStageDeploy"
        		},
        		"StartStageDeploy": {
        			"Type": "Task",
        			"Resource": "${StartStageDeployPipeline.Arn}",
        			"Next": "CheckStageDeployStatus"
        		},
        		"CheckStageDeployStatus": {
        			"Type": "Task",
        			"Resource": "${CheckStageDeployStatus.Arn}",
        			"Next": "StageDeployStatus"
        		},
        		"StageDeployStatus": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.pipeline_status",
        				"StringEquals": "InProgress",
        				"Next": "StageDeployStatusWait"
        			}],
        			"Default": "SetStageDeployStatus"
        		},
        		"StageDeployStatusWait": {
        			"Type": "Wait",
        			"Seconds": 15,
        			"Next": "CheckStageDeployStatus"
        		},
        		"SetStageDeployStatus": {
        			"Type": "Task",
        			"Resource": "${SetStageDeployStatus.Arn}",
        			"End": true
        		},
        		"End": {
        			"Type": "Pass",
        			"End": true
        		}
        	}
        }
      RoleArn: !GetAtt PipelineMgrStateMachineRole.Arn

  PipelineMgrGWRole:
    Type: AWS::IAM::Role
    DependsOn: PipelineMgrStateMachine
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelineMgrGWPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - states:StartExecution
                Resource: !Ref PipelineMgrStateMachine
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  PipelineMgrGW:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub thebestest-pipelinemgr-api
      Description: Rest API for the bestest pipeline manager

  WebhookEndPointResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt PipelineMgrGW.RootResourceId
      PathPart: webhook
      RestApiId: !Ref PipelineMgrGW

  WebhookEndPointMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PipelineMgrGW
      ResourceId: !Ref WebhookEndPointResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        Credentials: !GetAtt PipelineMgrGWRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: !Sub |
            {
              "input": "$util.escapeJavaScript($input.json('$'))",
              "name": "$context.requestId",
              "stateMachineArn": "${PipelineMgrStateMachine}"
            }
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  ApiGwStageDeployer:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/apigw_stage_deployer
      Handler: apigw_stage_deployer.deploy_stage
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6

  PipelineMgrStageDeployer:
    Type: Custom::PipelineMgrStageDeployer
    Properties:
      ServiceToken: !GetAtt ApiGwStageDeployer.Arn
      StageName: pipelinemgr
      RestApiId: !Ref PipelineMgrGW
      # Used to make sure this custom resource is updated when
      # WebhookEndPointMethod and PipelineMgrStateMachine is updated.
      WebhookEndPoint: !Ref WebhookEndPointMethod
      PipelineMgrStateMachine: !Ref PipelineMgrStateMachine


