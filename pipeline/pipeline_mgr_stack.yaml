AWSTemplateFormatVersion: 2010-09-09
Description: Manages the flow through the pipeline for TheBestest App
Parameters:
  OAuthToken:
    Type: String

Resources:
  PipelineMgrLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:PutObject
                Resource: !Sub
                  -  arn:aws:s3:::${PipelineBucket}/*
                  - { PipelineBucket: !ImportValue TheBestest-PipelineBucket }
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: !Sub
                  -  arn:aws:s3:::${PipelineBucket}
                  - { PipelineBucket: !ImportValue TheBestest-PipelineBucket }
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/thebestest-*/*
              - Effect: Allow
                Action:
                  - codepipeline:*
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:thebestest-pipeline-test-*
              - Effect: Allow
                Action:
                  - codebuild:*
                Resource: !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/thebestest-pipeline-test-*
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/thebestest-pipeline-test-*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/thebestest-pipeline-test-*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  PipelineManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline
      Handler: pipeline_mgr_lambdas.lambda_handler
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Timeout: 250
      Environment:
        Variables:
          OAUTH_TOKEN: !Ref OAuthToken
          S3_BUCKET: !ImportValue TheBestest-PipelineBucket

  PipelineMgrStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelineMgrStateMachinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - lambda:InvokeFunction
                 # Todo Lockdown?
                Resource: "*"

  PipelineMgrStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
        	"Comment": "update Automatic testing or deployment of code kicked off by GH Webhooks",
        	"StartAt": "SetWebhookAction",
        	"States": {
        		"SetWebhookAction": {
        			"Type": "Pass",
        			"Result": "HandleWebhook",
        			"ResultPath": "$.pipeline_action",
        			"Next": "HandleWebhook"
        		},
        		"HandleWebhook": {
        			"Type": "Task",
        			"Resource": "${PipelineManagerFunction.Arn}",
        			"Next": "PipelineAction"
        		},
        		"PipelineAction": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.pipeline_action",
        				"StringEquals": "test",
        				"Next": "SetRetrieveSourceAction"
        			}],
        			"Default": "End"
        		},
        		"SetRetrieveSourceAction": {
        			"Type": "Pass",
        			"Result": "RetrieveSource",
        			"ResultPath": "$.pipeline_action",
        			"Next": "RetrieveSource"
        		},
        		"RetrieveSource": {
        			"Type": "Task",
        			"Resource": "${PipelineManagerFunction.Arn}",
        			"Next": "SetTestPipelineName"
        		},
        		"SetTestPipelineName": {
        			"Type": "Pass",
        			"Result": "thebestest-pipeline-test-",
        			"ResultPath": "$.pipeline_name",
        			"Next": "SetBuildPipelineAction"
        		},
        		"SetBuildPipelineAction": {
        			"Type": "Pass",
        			"Result": "BuildPipeline",
        			"ResultPath": "$.pipeline_action",
        			"Next": "BuildPipeline"
        		},
        		"BuildPipeline": {
        			"Type": "Task",
        			"Resource": "${PipelineManagerFunction.Arn}",
        			"Next": "SetStartTestAction"
        		},
        		"SetStartTestAction": {
        			"Type": "Pass",
        			"Result": "StartTest",
        			"ResultPath": "$.pipeline_action",
        			"Next": "StartTest"
        		},
        		"StartTest": {
        			"Type": "Task",
        			"Resource": "${PipelineManagerFunction.Arn}",
        			"Next": "SetCheckTestStatusAction"
        		},
        		"SetCheckTestStatusAction": {
        			"Type": "Pass",
        			"Result": "CheckTestStatus",
        			"ResultPath": "$.pipeline_action",
        			"Next": "CheckTestStatus"
        		},
        		"CheckTestStatus": {
        			"Type": "Task",
        			"Resource": "${PipelineManagerFunction.Arn}",
        			"Next": "TestStatus"
        		},
        		"TestStatus": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.manager.pipeline.status",
        				"StringEquals": "InProgress",
        				"Next": "TestStatusWait"
        			}],
        			"Default": "SetTestStatusAction"
        		},
        		"TestStatusWait": {
        			"Type": "Wait",
        			"Seconds": 15,
        			"Next": "CheckTestStatus"
        		},
        		"SetTestStatusAction": {
        			"Type": "Pass",
        			"Result": "SetTestStatus",
        			"ResultPath": "$.pipeline_action",
        			"Next": "SetTestStatus"
        		},
        		"SetTestStatus": {
        			"Type": "Task",
        			"Resource": "${PipelineManagerFunction.Arn}",
        			"Next": "End"
        		},
        		"End": {
        			"Type": "Pass",
        			"End": true
        		}
        	}
        }
      RoleArn: !GetAtt PipelineMgrStateMachineRole.Arn

  PipelineMgrGWRole:
    Type: AWS::IAM::Role
    DependsOn: PipelineMgrStateMachine
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelineMgrGWPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - states:StartExecution
                Resource: !Ref PipelineMgrStateMachine
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  PipelineMgrGW:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub thebestest-pipelinemgr-api
      Description: Rest API for the bestest pipeline manager

  WebhookEndPointResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt PipelineMgrGW.RootResourceId
      PathPart: webhook
      RestApiId: !Ref PipelineMgrGW

  WebhookEndPointMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PipelineMgrGW
      ResourceId: !Ref WebhookEndPointResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        Credentials: !GetAtt PipelineMgrGWRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: !Sub |
            {
              "input": "$util.escapeJavaScript($input.json('$'))",
              "name": "$context.requestId",
              "stateMachineArn": "${PipelineMgrStateMachine}"
            }
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  ApiGwStageDeployer:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/apigw_stage_deployer
      Handler: apigw_stage_deployer.deploy_stage
      Role: !GetAtt PipelineMgrLambdaRole.Arn
      Runtime: python3.6

  PipelineMgrStageDeployer:
    Type: Custom::PipelineMgrStageDeployer
    Properties:
      ServiceToken: !GetAtt ApiGwStageDeployer.Arn
      StageName: pipelinemgr
      RestApiId: !Ref PipelineMgrGW
      # Used to make sure this custom resource is updated when
      # WebhookEndPointMethod and PipelineMgrStateMachine is updated.
      WebhookEndPoint: !Ref WebhookEndPointMethod
      PipelineMgrStateMachine: !Ref PipelineMgrStateMachine


