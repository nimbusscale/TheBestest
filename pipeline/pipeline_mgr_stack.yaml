AWSTemplateFormatVersion: 2010-09-09
Description: Manages the flow through the pipeline for TheBestest App
Parameters:
  OAuthToken:
    Type: String
Resources:
  pipelineMgrLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            # Todo Lock down
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Join [ "", ["arn:aws:s3:::", !ImportValue theBestest-pipelineBucket, "/*"]]
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - codepipeline:GetPipeline
                  - codepipeline:GetPipelineState
                  - codepipeline:StartPipelineExecution
                  - codepipeline:GetPipelineExecution
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  webhookHandler:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline_mgr
      Handler: pipeline_mgr.webhook_handler
      Role: !GetAtt pipelineMgrLambdaRole.Arn
      Runtime: python3.6

  retrieveSource:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline_mgr
      Handler: pipeline_mgr.retrieve_source
      Role: !GetAtt pipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          OAUTH_TOKEN: !Ref OAuthToken
          S3_BUCKET: !ImportValue theBestest-pipelineBucket

  startTestPipeline:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline_mgr
      Handler: pipeline_mgr.start_pipeline
      Role: !GetAtt pipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          OAUTH_TOKEN: !Ref OAuthToken
          PIPELINE_NAME: !ImportValue theBestest-testPipeline

  checkTestPipelineStatus:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline_mgr
      Handler: pipeline_mgr.check_pipeline_status
      Role: !GetAtt pipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          PIPELINE_NAME: !ImportValue theBestest-testPipeline

  setTestStatus:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline_mgr
      Handler: pipeline_mgr.set_github_status
      Role: !GetAtt pipelineMgrLambdaRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          OAUTH_TOKEN: !Ref OAuthToken
          PIPELINE_NAME: !ImportValue theBestest-testPipeline


  pipelineMgrStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelineMgrStateMachinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - lambda:InvokeFunction
                 # Todo Lockdown?
                Resource: "*"

  pipelineMgrStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "update Automatic testing or deployment of code kicked off by GH Webhooks",
          "StartAt": "HandleWebhook",
          "States": {
            "HandleWebhook": {
              "Type": "Task",
              "Resource": "${webhookHandler.Arn}",
              "Next": "PipelineAction"
            },
            "PipelineAction": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.action",
                  "StringEquals": "test",
                  "Next": "RetrieveTestSource"
                }
              ],
              "Default": "End"
            },
            "RetrieveTestSource": {
              "Type": "Task",
              "Resource": "${retrieveSource.Arn}",
              "Next": "StartUnitTest"
            },
            "StartUnitTest": {
              "Type": "Task",
              "Resource": "${startTestPipeline.Arn}",
              "Next": "CheckUnitTestStatus"
            },
            "CheckUnitTestStatus": {
              "Type": "Task",
              "Resource": "${checkTestPipelineStatus.Arn}",
              "Next": "UnitTestStatus"
            },
            "UnitTestStatus": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.pipeline_status",
                  "StringEquals": "InProgress",
                  "Next": "Wait15Seconds"
                }
              ],
              "Default": "SetUnitTestStatus"
            },
            "Wait15Seconds": {
              "Type": "Wait",
              "Seconds": 15,
              "Next": "CheckUnitTestStatus"
            },
            "SetUnitTestStatus": {
              "Type": "Task",
              "Resource": "${setTestStatus.Arn}",
              "End": true
            },
            "End": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt pipelineMgrStateMachineRole.Arn

  pipelineMgrGWRole:
    Type: AWS::IAM::Role
    DependsOn: pipelineMgrStateMachine
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelineMgrGWPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - states:StartExecution
                Resource: !Ref pipelineMgrStateMachine
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  pipelineMgrGW:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub thebestest-pipelinemgr-api
      Description: Rest API for the bestest pipeline manager

  webhookEndPointResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt pipelineMgrGW.RootResourceId
      PathPart: webhook
      RestApiId: !Ref pipelineMgrGW

  webhookEndPointMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref pipelineMgrGW
      ResourceId: !Ref webhookEndPointResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        Credentials: !GetAtt pipelineMgrGWRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: !Sub |
            {
              "input": "$util.escapeJavaScript($input.json('$'))",
              "name": "$context.requestId",
              "stateMachineArn": "${pipelineMgrStateMachine}"
            }
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  apiGwStageDeployer:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/apigw_stage_deployer
      Handler: apigw_stage_deployer.deploy_stage
      Role: !GetAtt pipelineMgrLambdaRole.Arn
      Runtime: python3.6

  pipelineMgrStageDeployer:
    Type: Custom::pipelineMgrStageDeployer
    Properties:
      ServiceToken: !GetAtt apiGwStageDeployer.Arn
      StageName: pipelinemgr
      RestApiId: !Ref pipelineMgrGW
      # Used to make sure this custom resource is updated when
      # webhookEndPointMethod and pipelineMgrStateMachine is updated.
      WebhookEndPoint: !Ref webhookEndPointMethod
      PipelineMgrStateMachine: !Ref pipelineMgrStateMachine


