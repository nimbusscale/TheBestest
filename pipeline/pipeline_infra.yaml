AWSTemplateFormatVersion: 2010-09-09
Description: Pipeline Infra for TheBestest App
Parameters:
  OAuthToken:
    Type: String
Resources:
  cloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: cloudformationPolicy
          PolicyDocument:
            Version: 2012-10-17
            # Todo consider locking down perms
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Join [ "", ["arn:aws:s3:::", !ImportValue theBestest-pipelineBucket, "/*"]]
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: !Join [ "", ["arn:aws:apigateway:", !Ref "AWS::Region", "::*" ] ]
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Join [ "", ["arn:aws:dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":table/*" ] ]
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                Resource: !Join [ "", ["arn:aws:iam::", !Ref "AWS::AccountId", ":role/*" ] ]
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                Resource: "*"
              - Effect: Allow
                Action:
                  - cognito-idp:CreateUserPool
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:DeleteUserPool
                  - cognito-idp:DeleteUserPoolClient
                  - cognito-idp:UpdateUserPool
                  - cognito-idp:UpdateUserPoolClient
                Resource: "*"

  pipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Join [ "", ["arn:aws:s3:::", !ImportValue theBestest-pipelineBucket, "/*"]]
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:ListFunctions
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt deployApiFunction.Arn
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt cloudformationRole.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt theBestestBuild.Arn
                  - !GetAtt theBestestUnitTest.Arn

  buildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: buildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Join [ "", ["arn:aws:logs:" , !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/codebuild/*" ] ]
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join [ "", ["arn:aws:logs:" , !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/codebuild/thebestest*:log-stream:*" ] ]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Join [ "", ["arn:aws:s3:::", !ImportValue theBestest-pipelineBucket, "/*"]]

  deployApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: deployApiLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - codepipeline:PutJobFailureResult
                 - codepipeline:PutJobSuccessResult
                 - cloudformation:DescribeStacks
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: !Join [ "", ["arn:aws:apigateway:", !Ref "AWS::Region", "::*" ] ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  deployApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: functions/stage_deploy
      Handler: stage_deploy.lambda_handler
      Role: !GetAtt deployApiLambdaRole.Arn
      Runtime: python3.6

  theBestestUnitTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: thebestest-unittest
      ServiceRole: !GetAtt buildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec-unittest.yaml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/eb-python-3.4-amazonlinux-64:2.3.2
      Artifacts:
        Type: CODEPIPELINE

  theBestestBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: thebestest-build
      ServiceRole: !GetAtt buildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec-package.yaml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/eb-python-3.4-amazonlinux-64:2.3.2
      Artifacts:
        Type: CODEPIPELINE

Outputs:
  OAuthToken:
    Value: !Ref OAuthToken
    Export:
      Name: theBestest-OAuthToken
  pipelineRoleArn:
    Value: !GetAtt pipelineRole.Arn
    Export:
      Name: theBestest-pipelineRoleArn
  cloudformationRoleArn:
    Value: !GetAtt cloudformationRole.Arn
    Export:
      Name: theBestest-cloudformationRoleArn
  theBestestUnitTestId:
    Value: !Ref theBestestUnitTest
    Export:
      Name: theBestest-theBestestUnitTestId
  theBestestBuildId:
    Value: !Ref theBestestBuild
    Export:
      Name: theBestest-theBestestBuildId
  deployApiFunctionId:
    Value: !Ref deployApiFunction
    Export:
      Name: theBestest-deployApiFunctionId





