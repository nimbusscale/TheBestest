AWSTemplateFormatVersion: 2010-09-09
Description: Pipeline Infra for TheBestest App
Parameters:
  OAuthToken:
    Type: String
Resources:
  cloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: cloudformationPolicy
          PolicyDocument:
            Version: 2012-10-17
            # Todo consider locking down perms more
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Join [ "", ["arn:aws:s3:::", !ImportValue theBestest-pipelineBucket, "/*"]]
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: !Join [ "", ["arn:aws:apigateway:", !Ref "AWS::Region", "::*" ] ]
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Join [ "", ["arn:aws:dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":table/*" ] ]
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                Resource: !Join [ "", ["arn:aws:iam::", !Ref "AWS::AccountId", ":role/*" ] ]
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                Resource: "*"
              - Effect: Allow
                Action:
                  - cognito-idp:CreateUserPool
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:DeleteUserPool
                  - cognito-idp:DeleteUserPoolClient
                  - cognito-idp:UpdateUserPool
                  - cognito-idp:UpdateUserPoolClient
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:CreateStateMachine
                  - states:DeleteStateMachine
                Resource: !Join [ "", ["arn:aws:states:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":stateMachine:*" ] ]

  pipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Join [ "", ["arn:aws:s3:::", !ImportValue theBestest-pipelineBucket, "/*"]]
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:ListFunctions
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt cloudformationRole.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt theBestestBuild.Arn
                  - !GetAtt theBestestUnitTest.Arn

###############################################################################
## Pipeline Manager
###############################################################################

  pipelineMgrLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Join [ "", ["arn:aws:s3:::", !ImportValue theBestest-pipelineBucket, "/*"]]
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  webhookHandler:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline_mgr
      Handler: pipeline_mgr.webhook_handler
      Role: !GetAtt pipelineMgrLambdaRole.Arn
      Runtime: python3.6

  retrieveSource:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/pipeline_mgr
      Handler: pipeline_mgr.retrieve_source
      Role: !GetAtt pipelineMgrLambdaRole.Arn
      Runtime: python3.6

  pipelineMgrStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelineMgrStateMachinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - lambda:InvokeFunction
                 # Todo Lockdown?
                Resource: "*"

  pipelineMgrStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "Automatic testing or deployment of code kicked off by GH Webhooks",
          "StartAt": "HandleWebhook",
          "States": {
            "HandleWebhook": {
              "Type": "Task",
              "Resource": "${webhookHandler.Arn}",
              "Next": "PipelineAction"
            },
            "PipelineAction": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.action",
                  "StringEquals": "test",
                  "Next": "TestSource"
                }
              ],
              "Default": "End"
            },
            "TestSource": {
              "Type": "Task",
              "Resource": "${retrieveSource.Arn}",
              "Next": "End"
            },
            "End": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt pipelineMgrStateMachineRole.Arn

  pipelineMgrGWRole:
    Type: AWS::IAM::Role
    DependsOn: pipelineMgrStateMachine
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipelineMgrGWPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - states:StartExecution
                Resource: !Ref pipelineMgrStateMachine
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  pipelineMgrGW:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub thebestest-pipelinemgr-api
      Description: Rest API for the bestest pipeline manager

  webhookEndPointResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt pipelineMgrGW.RootResourceId
      PathPart: webhook
      RestApiId: !Ref pipelineMgrGW

  webhookEndPointMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: pipelineMgrStateMachine
    Properties:
      RestApiId: !Ref pipelineMgrGW
      ResourceId: !Ref webhookEndPointResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
        Credentials: !GetAtt pipelineMgrGWRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: !Sub |
            {
              "input": "$util.escapeJavaScript($input.json('$'))",
              "name": "$context.requestId",
              "stateMachineArn": "${pipelineMgrStateMachine}"
            }
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  apiGwStageDeployer:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/apigw_stage_deployer
      Handler: apigw_stage_deployer.deploy_stage
      Role: !GetAtt pipelineMgrLambdaRole.Arn
      Runtime: python3.6

  pipelineMgrStageDeployer:
    Type: Custom::ApiGwStageDeployer
    Properties:
      ServiceToken: !GetAtt apiGwStageDeployer.Arn
      StageName: pipelinemgr
      RestApiId: !Ref pipelineMgrGW

###############################################################################
## CodeBuild Projects
###############################################################################

  buildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: buildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Join [ "", ["arn:aws:logs:" , !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/codebuild/*" ] ]
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join [ "", ["arn:aws:logs:" , !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/codebuild/thebestest*:log-stream:*" ] ]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Join [ "", ["arn:aws:s3:::", !ImportValue theBestest-pipelineBucket, "/*"]]

  theBestestUnitTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: thebestest-unittest
      ServiceRole: !GetAtt buildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec-unittest.yaml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/eb-python-3.4-amazonlinux-64:2.3.2
      Artifacts:
        Type: CODEPIPELINE

  theBestestBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: thebestest-build
      ServiceRole: !GetAtt buildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pipeline/buildspec-package.yaml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/eb-python-3.4-amazonlinux-64:2.3.2
      Artifacts:
        Type: CODEPIPELINE

###############################################################################
## Deploy API Function
###############################################################################

  deployApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: deployApiLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                 - codepipeline:PutJobFailureResult
                 - codepipeline:PutJobSuccessResult
                 - cloudformation:DescribeStacks
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: !Join [ "", ["arn:aws:apigateway:", !Ref "AWS::Region", "::*" ] ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  deployApi:
    Type: AWS::Lambda::Function
    Properties:
      # functions_deploy is a temp location created by the
      # deploy_pipeline.infra.sh script
      Code: functions_deploy/apigw_stage_deployer
      Handler: apigw_stage_deployer.deploy_stage
      Role: !GetAtt deployApiLambdaRole.Arn
      Runtime: python3.6


###############################################################################
## Outputs
###############################################################################

Outputs:
  OAuthToken:
    Value: !Ref OAuthToken
    Export:
      Name: theBestest-OAuthToken
  pipelineRoleArn:
    Value: !GetAtt pipelineRole.Arn
    Export:
      Name: theBestest-pipelineRoleArn
  cloudformationRoleArn:
    Value: !GetAtt cloudformationRole.Arn
    Export:
      Name: theBestest-cloudformationRoleArn
  theBestestUnitTestId:
    Value: !Ref theBestestUnitTest
    Export:
      Name: theBestest-theBestestUnitTestId
  theBestestBuildId:
    Value: !Ref theBestestBuild
    Export:
      Name: theBestest-theBestestBuildId
  deployApiFunctionId:
    Value: !Ref deployApi
    Export:
      Name: theBestest-deployApiFunctionId





